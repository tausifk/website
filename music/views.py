from django.views import generic, View 
from .models import Album, Song
from .forms import AddAlbumForm, UpdateAlbumForm
from django.shortcuts import redirect, render
from django.views.generic.edit import CreateView, UpdateView, DeleteView
from django.urls import reverse, reverse_lazy
from django.core import serializers
from django.http import HttpResponse, HttpResponseForbidden, JsonResponse

from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .serializers import AlbumSerializer

class AlbumList(APIView):

	def get(self, request):
		albums = Album.objects.all()
		serializer = AlbumSerializer(albums, many=True)
		return Response(serializer.data)

class IndexView(generic.ListView):
	template_name = 'music/index.html' #music/album_list.html-autogenerated template name
	context_object_name = 'all_albums'  #album_list-automatically generated context variable 

	def get_queryset(self):  
		return Album.objects.all()

class DetailView(generic.DetailView):
	model = Album
	template_name = 'music/detail.html' #music/album_detail.html-autogenerated template name
	#album-automatically generated context variable

class SongsIndexView(generic.ListView):
	template_name= 'music/index_songs.html'
	context_object_name= 'all_songs'

	queryset= Song.objects.all()

'''Function Based Views (FBV's)'''

'''1.view for adding a new album to DB'''
def add_album (request):
	#if request is POST method then bound data to form
	if request.method == 'POST':
		form = AddAlbumForm(request.POST)
		#if bound data is valid then save data to DB
		if form.is_valid():
			new_album = form.save()
			album_url = new_album.get_absolute_url()
			return redirect(album_url)
		else:#In case of empty fields display empty form
			return render(request, 'music/album_form.html', {'form':form})
	else: #for GET or any other request
		form = AddAlbumForm()
		if request.is_ajax():
			text = form.field.help_text
			text_obj = {
				field: text,
			}
			data = serializers.serialize('json', text_obj)
			return HttpResponse(data)

			
		return render(request, 'music/album_form.html', {'form':form})

'''2.view for updating a new album to DB'''
# def update_album(request, pk):
# 	if request.method == 'POST':
# 		album = Album.objects.get(pk=pk)
# 		form = UpdateAlbumForm(request.POST, instance=album)
# 		if form.is_valid():
# 			new_album = form.save()
# 			album_url = new_album.get_absolute_url()
# 			return redirect(album_url)
# 		else:
# 			return render(request, 'music/album_form.html', {'form':form})
# 	else:
# 		album = Album.objects.get(pk=pk)
# 		form = UpdateAlbumForm(initial={}, instance=album)
# 		return render(request, 'music/album_form.html', {'form':form})


'''Class Based View (CBV's) equivalent to Function Based Views(FBV's)'''

# A.CBV inheriting from views.View

# 1.CBV for AddAlbumForm
# class AddAlbumFormView(View):
# 	form_class = AddAlbumForm
# 	template_name = 'music/album_form.html'
# 	initial = {'key': 'value'}

# 	def get(self, request, *args, **kwargs):
# 		form = self.form_class(initial= self.initial)
# 		return render(request, self.template_name, {'form': form})

# 	def post(self, request, *args, **kwargs):
# 		form = self.form_class(request.POST)
# 		if form.is_valid:
# 			new_album = form.save()
# 			album_url = new_album.get_absolute_url()
# 			return redirect(album_url)
# 		else:
# 			return render(request, self.template_name, {'form':form})


	# 2.CBV for UpdateAlbumForm
# class UpdateAlbumFormView(AddAlbumFormView):
# 	form_class = UpdateAlbumForm
# 	album = Album.objects.get(pk= pk)

# 	def get(self, request, *args, **kwargs):
# 		form = self.form_class(initial=self.initial, instance= self.album)
# 		return render(request, self.template_name, {'form': form})

# 	def post(self, request, *args, **kwargs):
# 		form = self.form_class(request.POST, instance= self.album)
# 		if form.is_valid:
# 			new_album = form.save()
# 			album_url = new_album.get_absolute_url()
# 			return redirect(album_url)
# 		else:
# 			return render(request, self.template_name, {'form':form})


'''Generic Class Based Views (CBV's-generic) equivalent to above FBV's and CBV's'''

	# A.CBV's-generic inheriting from views.generic.edit import CreateView

	# 1.CBV's-generic for AddAlbumForm

# class AddAlbumFormView(CreateView):
# 	model= Album #it will automatically create ModelForm(it won't use AddAlbumForm unless specified)
# 	fields = ['artist', 'album_title', 'genere', 'album_logo']
# 	template_name= 'music/album_form.html'

	# 2.CBV's-generic for UpdateAlbumForm
class UpdateAlbumFormView(UpdateView):
	model= Album #it will automatically create ModelForm(it won't use AddAlbumForm unless specified)
	form_class= UpdateAlbumForm
	template_name= 'music/album_form.html'


'''Views for Creating,Deleting Songs'''

class AddSongFormView(CreateView): #Problem while redirecting to new url.
	model= Song 
	fields = ['song_title','album', 'file_type']
	template_name= 'music/song_form.html'

class DeleteSongFormView(DeleteView): #implement letter see the standard process for deleting an object .
	model= Song
	success_url=reverse_lazy('music:song-index')

'''1.view for Help text from DB'''
# def get_data(request):

	# class LazyEncoder(DjangoJSONEncoder):
	# 	def default(self, obj):
	# 		if isinstance(obj, Album):
	# 			return str(obj)
	# 		return super().default(obj)
	
	# data = Album.objects.all()
	# if request.is_ajax():	
	# response = jason.dumps('json', Album.objects.all())

	# data = serializers.serialize("json", Album.objects.all())
	# return  HttpResponse(data)
	# return JsonResponse(data)

# def get_albums(request):
# 	data = serializers.serialize("json", Album.objects.all())
# 	return  HttpResponse(data)

def add_comments (request):
	if request.method == 'POST':
		if request.is_ajax():
			form = CommentsForm(request.POST)
			if form.is_valid():
				form.save()
				data = serializers.serialize("json", Comments.objects.all())
				return  HttpResponse(data)	
			else:
				return render(request, 'music/detail.html', {'form':form})
	else: 
		form = CommentsForm()
		return render(request, 'music/detail.html', {'form':form})

def album_help(request):
	# if request.is_ajax():
	form = AddAlbumForm()
	# text = form.artist.help_text
	# dat = serializers.serialize('json', Album.objects.get(pk=1))
	l = []
	for field in form:
		h = field.help_text
		l.append(h)
	data = {
		'artist': l[0], 
		'album_title':l[1], 
		'genere':l[2], 
		'album_logo':l[3]
		}
	
	# data = serializers.serialize('json', l)
	return JsonResponse(data, safe = False)











	


